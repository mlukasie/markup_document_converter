name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

  workflow_dispatch:

jobs:
  release:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: pip install poetry toml

      - name: Install dependencies
        run: poetry install --no-root

      - name: Bump patch version only if current version exists as tag
        id: bump
        run: |
          VERSION=$(python -c "import toml; print(toml.load(open('pyproject.toml'))['project']['version'])")
          echo "Current version: $VERSION"

          TAGS=$(git tag)
          if echo "$TAGS" | grep -qx "$VERSION" || echo "$TAGS" | grep -qx "v$VERSION"; then
            echo "Tag $VERSION exists. Bump PATCH."
            poetry version patch
            echo "bumped=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $VERSION doesn't exists. Don't bump version"
            echo "bumped=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push version bump
        if: steps.bump.outputs.bumped == 'true'
        run: |
          git config --local user.name "${GITHUB_ACTOR}"
          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "Bump patch version [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract current version
        id: get_version
        run: echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Build package
        run: poetry build

      - name: Create Release Tag
        id: create_tag
        run: |
          TAG_NAME="v${{ steps.get_version.outputs.version }}"
          git config --local user.name "${GITHUB_ACTOR}"
          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            exit 0
          fi

          git tag -a $TAG_NAME -m "Release $TAG_NAME"
          git push origin $TAG_NAME
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "Automatic version release ${{ steps.get_version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "Changes in this version:" >> release_notes.md

          echo "- Merged PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}" >> release_notes.md
          echo "" >> release_notes.md

          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
            echo "Commits since $PREVIOUS_TAG:" >> release_notes.md
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" >> release_notes.md
          else
            echo "All commits:" >> release_notes.md
            git log --pretty=format:"- %s" >> release_notes.md
          fi

          delimiter=$(openssl rand -hex 8)

          {
            echo "release_notes<<$delimiter"
            sed -e '$a\' release_notes.md
            echo "$delimiter"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: steps.create_tag.outputs.tag_exists != 'true'
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          name: Release ${{ steps.create_tag.outputs.tag_name }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
